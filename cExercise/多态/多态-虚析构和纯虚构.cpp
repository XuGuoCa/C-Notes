//虚析构和纯虚虚构
# include <iostream>
using namespace std;

class Animal {

public:
	//纯虚函数
	virtual void speak() = 0;

	Animal() {

		cout << "Animal 的构造函数调用" << endl;
	}

	//虚析构可以解决  父类指针释放子类对象时不干净的问题
	/*virtual ~Animal() {

		cout << "Animal 的析构函数调用" << endl;
	}*/

	//纯虚析构    需要声明也需要有实现
	//有了纯虚析构 之后， 这个类也属于抽象类， 无法实例化对象
	virtual ~Animal() = 0;
};

Animal::~Animal() {

	cout << "Animal 的纯析构函数调用" << endl;
}

class Cat : public Animal {
public:

	Cat(string name) {

		cout << "Cat 构造函数调用" << endl;
		m_Name = new string(name);
	}

	~Cat() {

		if (m_Name != NULL) {

			cout << "Cat 析构函数调用" << endl;
			delete m_Name;
			m_Name = NULL;
		}
	}

	void speak() {

		cout << *m_Name << "小猫在说话" << endl;
	}

	string *m_Name;
};

void test01() {

	Animal* animal = new Cat("Tom");
	animal->speak();
	//父类指针在析构的时候  不会调用子类中析构函数， 导致子类中如果有堆区属性， 出现内存泄漏
	delete animal;
}

int main() {

	test01();

	system("Pause");

	return 0;
}